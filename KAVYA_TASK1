{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":23498,"sourceType":"datasetVersion","datasetId":310}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T05:34:47.979846Z","iopub.execute_input":"2024-06-22T05:34:47.980232Z","iopub.status.idle":"2024-06-22T05:34:47.986263Z","shell.execute_reply.started":"2024-06-22T05:34:47.980200Z","shell.execute_reply":"2024-06-22T05:34:47.984870Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#loading dataset to pandas dataframe\ncredit_card_data = pd.read_csv(\"/kaggle/input/creditcardfraud/creditcard.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-06-22T05:36:24.520157Z","iopub.execute_input":"2024-06-22T05:36:24.520825Z","iopub.status.idle":"2024-06-22T05:36:28.691859Z","shell.execute_reply.started":"2024-06-22T05:36:24.520789Z","shell.execute_reply":"2024-06-22T05:36:28.690686Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# first 5 rows \ncredit_card_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T05:38:03.256725Z","iopub.execute_input":"2024-06-22T05:38:03.257255Z","iopub.status.idle":"2024-06-22T05:38:03.301437Z","shell.execute_reply.started":"2024-06-22T05:38:03.257211Z","shell.execute_reply":"2024-06-22T05:38:03.300333Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"credit_card_data.tail()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T05:39:46.311043Z","iopub.execute_input":"2024-06-22T05:39:46.311497Z","iopub.status.idle":"2024-06-22T05:39:46.340351Z","shell.execute_reply.started":"2024-06-22T05:39:46.311463Z","shell.execute_reply":"2024-06-22T05:39:46.339192Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"credit_card_data.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T05:40:47.940481Z","iopub.execute_input":"2024-06-22T05:40:47.941501Z","iopub.status.idle":"2024-06-22T05:40:47.979392Z","shell.execute_reply.started":"2024-06-22T05:40:47.941462Z","shell.execute_reply":"2024-06-22T05:40:47.978339Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#checking the number of missing values in each column\ncredit_card_data.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T05:43:14.964469Z","iopub.execute_input":"2024-06-22T05:43:14.964889Z","iopub.status.idle":"2024-06-22T05:43:14.988346Z","shell.execute_reply.started":"2024-06-22T05:43:14.964856Z","shell.execute_reply":"2024-06-22T05:43:14.987227Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#class =0 is legit transcation\n#class=1 is fraud\ncredit_card_data['Class'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T05:46:28.274868Z","iopub.execute_input":"2024-06-22T05:46:28.275294Z","iopub.status.idle":"2024-06-22T05:46:28.292825Z","shell.execute_reply.started":"2024-06-22T05:46:28.275259Z","shell.execute_reply":"2024-06-22T05:46:28.291483Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#unblanced data because of 492 fraud transction ,seperating the data for anaylsis\nlegit = credit_card_data[credit_card_data.Class ==0]\nfraud = credit_card_data[credit_card_data.Class ==1]","metadata":{"execution":{"iopub.status.busy":"2024-06-22T05:53:19.155811Z","iopub.execute_input":"2024-06-22T05:53:19.156256Z","iopub.status.idle":"2024-06-22T05:53:19.199917Z","shell.execute_reply.started":"2024-06-22T05:53:19.156221Z","shell.execute_reply":"2024-06-22T05:53:19.198959Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(legit.shape)\nprint(fraud.shape)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T05:54:19.124190Z","iopub.execute_input":"2024-06-22T05:54:19.124580Z","iopub.status.idle":"2024-06-22T05:54:19.130811Z","shell.execute_reply.started":"2024-06-22T05:54:19.124553Z","shell.execute_reply":"2024-06-22T05:54:19.129260Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"legit.Amount.describe()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T05:55:34.235621Z","iopub.execute_input":"2024-06-22T05:55:34.236046Z","iopub.status.idle":"2024-06-22T05:55:34.262864Z","shell.execute_reply.started":"2024-06-22T05:55:34.236007Z","shell.execute_reply":"2024-06-22T05:55:34.261690Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#the amount is in dollars\n50 percentage of values are less than 22 ","metadata":{}},{"cell_type":"code","source":"fraud.Amount.describe()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T05:58:41.243132Z","iopub.execute_input":"2024-06-22T05:58:41.243969Z","iopub.status.idle":"2024-06-22T05:58:41.255409Z","shell.execute_reply.started":"2024-06-22T05:58:41.243929Z","shell.execute_reply":"2024-06-22T05:58:41.254192Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# compare the values for both transaction\ngrouped_means=credit_card_data.groupby('Class').mean()\nprint(grouped_means)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T06:04:36.083456Z","iopub.execute_input":"2024-06-22T06:04:36.083876Z","iopub.status.idle":"2024-06-22T06:04:36.217941Z","shell.execute_reply.started":"2024-06-22T06:04:36.083844Z","shell.execute_reply":"2024-06-22T06:04:36.216784Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# build a sample dataset containing similar distribution of normal transactions and fradulent transaction ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"#random sampling \nlegit_sample = legit.sample(n=492)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T06:10:28.519206Z","iopub.execute_input":"2024-06-22T06:10:28.519634Z","iopub.status.idle":"2024-06-22T06:10:28.532890Z","shell.execute_reply.started":"2024-06-22T06:10:28.519603Z","shell.execute_reply":"2024-06-22T06:10:28.531791Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#concatenating two dataframes\nnew_dataset = pd.concat([legit_sample,fraud],axis=0)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T06:21:41.581997Z","iopub.execute_input":"2024-06-22T06:21:41.582548Z","iopub.status.idle":"2024-06-22T06:21:41.589072Z","shell.execute_reply.started":"2024-06-22T06:21:41.582515Z","shell.execute_reply":"2024-06-22T06:21:41.587856Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_dataset.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T06:14:04.334574Z","iopub.execute_input":"2024-06-22T06:14:04.334980Z","iopub.status.idle":"2024-06-22T06:14:04.367121Z","shell.execute_reply.started":"2024-06-22T06:14:04.334949Z","shell.execute_reply":"2024-06-22T06:14:04.365722Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_dataset.tail()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T06:14:39.337784Z","iopub.execute_input":"2024-06-22T06:14:39.338193Z","iopub.status.idle":"2024-06-22T06:14:39.365745Z","shell.execute_reply.started":"2024-06-22T06:14:39.338161Z","shell.execute_reply":"2024-06-22T06:14:39.364757Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_dataset['Class'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T06:16:45.622500Z","iopub.execute_input":"2024-06-22T06:16:45.622876Z","iopub.status.idle":"2024-06-22T06:16:45.632199Z","shell.execute_reply.started":"2024-06-22T06:16:45.622848Z","shell.execute_reply":"2024-06-22T06:16:45.630955Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#uniformly distributed data now","metadata":{}},{"cell_type":"code","source":"new_dataset.groupby('Class').mean()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T06:19:16.092373Z","iopub.execute_input":"2024-06-22T06:19:16.092768Z","iopub.status.idle":"2024-06-22T06:19:16.121131Z","shell.execute_reply.started":"2024-06-22T06:19:16.092739Z","shell.execute_reply":"2024-06-22T06:19:16.120055Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = new_dataset.drop(columns='Class',axis=0)\nY = new_dataset['Class']","metadata":{"execution":{"iopub.status.busy":"2024-06-22T06:24:47.814791Z","iopub.execute_input":"2024-06-22T06:24:47.815201Z","iopub.status.idle":"2024-06-22T06:24:47.821696Z","shell.execute_reply.started":"2024-06-22T06:24:47.815170Z","shell.execute_reply":"2024-06-22T06:24:47.820495Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(X)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T06:24:52.944701Z","iopub.execute_input":"2024-06-22T06:24:52.945097Z","iopub.status.idle":"2024-06-22T06:24:52.966466Z","shell.execute_reply.started":"2024-06-22T06:24:52.945064Z","shell.execute_reply":"2024-06-22T06:24:52.965161Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#so here one column is dropped\n","metadata":{}},{"cell_type":"code","source":"print(Y)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T06:25:27.982068Z","iopub.execute_input":"2024-06-22T06:25:27.982486Z","iopub.status.idle":"2024-06-22T06:25:27.990057Z","shell.execute_reply.started":"2024-06-22T06:25:27.982456Z","shell.execute_reply":"2024-06-22T06:25:27.988661Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Load the dataset\ndf = pd.read_csv(\"/kaggle/input/creditcardfraud/creditcard.csv\")  # replace with your dataset path\n\n# Print the column names to find the correct target column name\nprint(df.columns)\ncredit_card_data = pd.read_csv(\"/kaggle/input/creditcardfraud/creditcard.csv\")\ncredit_card_data.info()\nlegit = credit_card_data[credit_card_data.Class ==0]\nfraud = credit_card_data[credit_card_data.Class ==1]\nlegit_sample = legit.sample(n=492)\nnew_dataset = pd.concat([legit_sample,fraud],axis=0)\n\nX = new_dataset.drop(columns='Class',axis=0)\nY = new_dataset['Class']\n\n# Splitting the data into training and testing data\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=42)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:50:48.746388Z","iopub.execute_input":"2024-06-22T16:50:48.747474Z","iopub.status.idle":"2024-06-22T16:50:53.935939Z","shell.execute_reply.started":"2024-06-22T16:50:48.747433Z","shell.execute_reply":"2024-06-22T16:50:53.934689Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"Index(['Time', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10',\n       'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20',\n       'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Amount',\n       'Class'],\n      dtype='object')\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 284807 entries, 0 to 284806\nData columns (total 31 columns):\n #   Column  Non-Null Count   Dtype  \n---  ------  --------------   -----  \n 0   Time    284807 non-null  float64\n 1   V1      284807 non-null  float64\n 2   V2      284807 non-null  float64\n 3   V3      284807 non-null  float64\n 4   V4      284807 non-null  float64\n 5   V5      284807 non-null  float64\n 6   V6      284807 non-null  float64\n 7   V7      284807 non-null  float64\n 8   V8      284807 non-null  float64\n 9   V9      284807 non-null  float64\n 10  V10     284807 non-null  float64\n 11  V11     284807 non-null  float64\n 12  V12     284807 non-null  float64\n 13  V13     284807 non-null  float64\n 14  V14     284807 non-null  float64\n 15  V15     284807 non-null  float64\n 16  V16     284807 non-null  float64\n 17  V17     284807 non-null  float64\n 18  V18     284807 non-null  float64\n 19  V19     284807 non-null  float64\n 20  V20     284807 non-null  float64\n 21  V21     284807 non-null  float64\n 22  V22     284807 non-null  float64\n 23  V23     284807 non-null  float64\n 24  V24     284807 non-null  float64\n 25  V25     284807 non-null  float64\n 26  V26     284807 non-null  float64\n 27  V27     284807 non-null  float64\n 28  V28     284807 non-null  float64\n 29  Amount  284807 non-null  float64\n 30  Class   284807 non-null  int64  \ndtypes: float64(30), int64(1)\nmemory usage: 67.4 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"print(X.shape,X_train.shape,X_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:52:52.074770Z","iopub.execute_input":"2024-06-22T16:52:52.075160Z","iopub.status.idle":"2024-06-22T16:52:52.080951Z","shell.execute_reply.started":"2024-06-22T16:52:52.075130Z","shell.execute_reply":"2024-06-22T16:52:52.079863Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"(984, 30) (787, 30) (197, 30)\n","output_type":"stream"}]},{"cell_type":"code","source":"#model training logistic regression\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T17:10:26.159572Z","iopub.execute_input":"2024-06-22T17:10:26.159936Z","iopub.status.idle":"2024-06-22T17:10:26.165285Z","shell.execute_reply.started":"2024-06-22T17:10:26.159907Z","shell.execute_reply":"2024-06-22T17:10:26.164157Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"model = LogisticRegression()\nmodel.fit(X_train, Y_train)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T17:10:31.464034Z","iopub.execute_input":"2024-06-22T17:10:31.464411Z","iopub.status.idle":"2024-06-22T17:10:31.508736Z","shell.execute_reply.started":"2024-06-22T17:10:31.464382Z","shell.execute_reply":"2024-06-22T17:10:31.507450Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"LogisticRegression()","text/html":"<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"X_train_prediction = model.predict(X_train)\ntraining_data_accuracy = accuracy_score(Y_train, X_train_prediction)\nprint('Accuracy on Training data:', training_data_accuracy)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T17:10:35.644132Z","iopub.execute_input":"2024-06-22T17:10:35.645208Z","iopub.status.idle":"2024-06-22T17:10:35.657457Z","shell.execute_reply.started":"2024-06-22T17:10:35.645160Z","shell.execute_reply":"2024-06-22T17:10:35.656077Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"Accuracy on Training data: 0.9415501905972046\n","output_type":"stream"}]},{"cell_type":"markdown","source":"accuracy score\n","metadata":{}},{"cell_type":"code","source":"# accuracy on testing data\nX_test_prediction = model.predict(X_test)\ntest_data_accuracy = accuracy_score(X_test_prediction,Y_test)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T17:12:41.518108Z","iopub.execute_input":"2024-06-22T17:12:41.519205Z","iopub.status.idle":"2024-06-22T17:12:41.527723Z","shell.execute_reply.started":"2024-06-22T17:12:41.519164Z","shell.execute_reply":"2024-06-22T17:12:41.526310Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"print('Accuracy on Test data:', test_data_accuracy)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-22T17:13:17.163968Z","iopub.execute_input":"2024-06-22T17:13:17.164411Z","iopub.status.idle":"2024-06-22T17:13:17.170412Z","shell.execute_reply.started":"2024-06-22T17:13:17.164377Z","shell.execute_reply":"2024-06-22T17:13:17.169289Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"Accuracy on Test data: 0.9441624365482234\n","output_type":"stream"}]}]}